./src/middleware.ts:19:11 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    17 │         },
    18 │         setAll(cookiesToSet) {
  > 19 │           cookiesToSet.forEach(({ name, value, options }) =>
       │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 20 │             request.cookies.set(name, value),
  > 21 │           );
       │           ^
    22 │           supabaseResponse = NextResponse.next({
    23 │             request,
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

./src/middleware.ts:25:11 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    23 │             request,
    24 │           });
  > 25 │           cookiesToSet.forEach(({ name, value, options }) =>
       │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 26 │             supabaseResponse.cookies.set(name, value, options),
  > 27 │           );
       │           ^
    28 │         },
    29 │       },
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

./src/app/api/ai/generate-prayer/route.ts:126:53 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    125 │     // Save prayer to database for user's prayer history
  > 126 │     const { error: saveError } = await (supabase as any)
        │                                                     ^^^
    127 │       .from("ai_generated_prayers")
    128 │       .insert({
  
  i any disables many type checking rules. Its use should be avoided.
  

./src/app/api/ai/daily-message/route.ts:43:58 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    42 │     // Check if we already have a daily message for today
  > 43 │     const { data: existingMessage } = await (supabase as any)
       │                                                          ^^^
    44 │       .from("daily_spiritual_messages")
    45 │       .select("*")
  
  i any disables many type checking rules. Its use should be avoided.
  

./src/app/api/ai/daily-message/route.ts:107:73 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    106 │     // Save the daily message to database
  > 107 │     const { data: savedMessage, error: saveError } = await (supabase as any)
        │                                                                         ^^^
    108 │       .from("daily_spiritual_messages")
    109 │       .insert({
  
  i any disables many type checking rules. Its use should be avoided.
  

./src/app/api/ai/daily-message/route.ts:129:55 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    127 │     // Track user engagement if user is authenticated
    128 │     if (user && savedMessage) {
  > 129 │       const { error: viewError } = await (supabase as any)
        │                                                       ^^^
    130 │         .from("user_daily_message_views")
    131 │         .insert({
  
  i any disables many type checking rules. Its use should be avoided.
  

./src/app/api/ai/spiritual-guidance/route.ts:138:53 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    137 │     // Save conversation to database
  > 138 │     const { error: saveError } = await (supabase as any)
        │                                                     ^^^
    139 │       .from("spiritual_guidance_conversations")
    140 │       .insert({
  
  i any disables many type checking rules. Its use should be avoided.
  

./src/app/api/ai/spiritual-guidance/route.ts:199:62 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    198 │     // Get recent spiritual guidance conversations
  > 199 │     const { data: recentConversations } = await (supabase as any)
        │                                                              ^^^
    200 │       .from("spiritual_guidance_conversations")
    201 │       .select("user_message, sister_grace_response")
  
  i any disables many type checking rules. Its use should be avoided.
  

./src/app/api/audio/text-to-speech/route.ts:205:48 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    203 │     const cacheKey = generateCacheKey(text, language, voice, speed);
    204 │ 
  > 205 │     const { data, error } = await (supabase as any)
        │                                                ^^^
    206 │       .from("tts_audio_cache")
    207 │       .select("audio_url, duration")
  
  i any disables many type checking rules. Its use should be avoided.
  

./src/app/api/audio/text-to-speech/route.ts:239:42 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    237 │     expiresAt.setHours(expiresAt.getHours() + 24); // Cache for 24 hours
    238 │ 
  > 239 │     const { error } = await (supabase as any).from("tts_audio_cache").upsert({
        │                                          ^^^
    240 │       cache_key: cacheKey,
    241 │       text_content: text,
  
  i any disables many type checking rules. Its use should be avoided.
  

./src/app/api/audio/text-to-speech/route.ts:268:42 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    266 │     const supabase = await createClient();
    267 │ 
  > 268 │     const { error } = await (supabase as any).from("user_api_costs").insert({
        │                                          ^^^
    269 │       user_id: userId,
    270 │       api_type: "tts",
  
  i any disables many type checking rules. Its use should be avoided.
  

./src/app/calendar/page.tsx:370:33 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    368 │                   <div className="space-y-6">
    369 │                     {liturgicalDay.saints.map((saint, index) => (
  > 370 │                       <div key={index} className="bg-black/20 rounded-lg p-4">
        │                                 ^^^^^
    371 │                         <h4 className="text-lg font-semibold mb-2 text-[#6b9bcc]">
    372 │                           {saint.name}
  
  i This is the source of the key value.
  
    368 │                   <div className="space-y-6">
  > 369 │                     {liturgicalDay.saints.map((saint, index) => (
        │                                                       ^^^^^
    370 │                       <div key={index} className="bg-black/20 rounded-lg p-4">
    371 │                         <h4 className="text-lg font-semibold mb-2 text-[#6b9bcc]">
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./src/app/calendar/page.tsx:389:40 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    387 │                               {saint.patronOf.map((patron, i) => (
    388 │                                 <span
  > 389 │                                   key={i}
        │                                        ^
    390 │                                   className="text-xs bg-purple-500/20 px-2 py-1 rounded"
    391 │                                 >
  
  i This is the source of the key value.
  
    385 │                             </p>
    386 │                             <div className="flex flex-wrap gap-1">
  > 387 │                               {saint.patronOf.map((patron, i) => (
        │                                                            ^
    388 │                                 <span
    389 │                                   key={i}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./src/app/community/page.tsx:447:26 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    445 │                 {recentTestimonies.map((testimony, index) => (
    446 │                   <div
  > 447 │                     key={index}
        │                          ^^^^^
    448 │                     className="bg-black/30 backdrop-blur-md p-6 rounded-lg border border-gray-800"
    449 │                   >
  
  i This is the source of the key value.
  
    444 │               <div className="space-y-6">
  > 445 │                 {recentTestimonies.map((testimony, index) => (
        │                                                    ^^^^^
    446 │                   <div
    447 │                     key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./src/app/confession/page.tsx:17:25 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
    15 │ }
    16 │ 
  > 17 │ const actOfContrition = `O my God, I am heartily sorry for having offended Thee, and I detest all my sins because I dread the loss of Heaven and the pains of Hell, but most of all because they offend Thee, my God, Who art all-good and deserving of all my love. I firmly resolve, with the help of Thy grace, to confess my sins, to do penance, and to amend my life. Amen.`;
       │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    18 │ 
    19 │ export default function ConfessionPreparation() {
  
  i Unsafe fix: Replace with string literal
  
     15  15 │   }
     16  16 │   
     17     │ - const·actOfContrition·=·`O·my·God,·I·am·heartily·sorry·for·having·offended·Thee,·and·I·detest·all·my·sins·because·I·dread·the·loss·of·Heaven·and·the·pains·of·Hell,·but·most·of·all·because·they·offend·Thee,·my·God,·Who·art·all-good·and·deserving·of·all·my·love.·I·firmly·resolve,·with·the·help·of·Thy·grace,·to·confess·my·sins,·to·do·penance,·and·to·amend·my·life.·Amen.`;
         17 │ + const·actOfContrition·=·"O·my·God,·I·am·heartily·sorry·for·having·offended·Thee,·and·I·detest·all·my·sins·because·I·dread·the·loss·of·Heaven·and·the·pains·of·Hell,·but·most·of·all·because·they·offend·Thee,·my·God,·Who·art·all-good·and·deserving·of·all·my·love.·I·firmly·resolve,·with·the·help·of·Thy·grace,·to·confess·my·sins,·to·do·penance,·and·to·amend·my·life.·Amen.";
     18  18 │   
     19  19 │   export default function ConfessionPreparation() {
  

./src/app/confession/page.tsx:237:30 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    235 │                     {examinationCategories.map((category, index) => (
    236 │                       <div
  > 237 │                         key={index}
        │                              ^^^^^
    238 │                         onClick={() => setSelectedCategory(index)}
    239 │                         className={`card-premium p-6 cursor-pointer transition-all hover:scale-105 ${
  
  i This is the source of the key value.
  
    234 │                   <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
  > 235 │                     {examinationCategories.map((category, index) => (
        │                                                           ^^^^^
    236 │                       <div
    237 │                         key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./src/app/dashboard/page.tsx:133:11 lint/style/useSelfClosingElements  FIXABLE  ━━━━━━━━━━━━━━━━━━━━

  × JSX elements without children should be marked as self-closing. In JSX, it is valid for any element to be self-closing.
  
    131 │       <div className="min-h-screen bg-gray-50 flex items-center justify-center">
    132 │         <div className="text-center">
  > 133 │           <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto"></div>
        │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    134 │           <p className="mt-4 text-gray-600">{t.dashboard.loadingJourney}</p>
    135 │         </div>
  
  i Unsafe fix: Use a SelfClosingElement instead
  
    131 131 │         <div className="min-h-screen bg-gray-50 flex items-center justify-center">
    132 132 │           <div className="text-center">
    133     │ - ··········<div·className="animate-spin·rounded-full·h-12·w-12·border-b-2·border-purple-600·mx-auto"></div>
        133 │ + ··········<div·className="animate-spin·rounded-full·h-12·w-12·border-b-2·border-purple-600·mx-auto"·/>
    134 134 │             <p className="mt-4 text-gray-600">{t.dashboard.loadingJourney}</p>
    135 135 │           </div>
  

./src/app/dashboard/page.tsx:240:23 lint/style/useSelfClosingElements  FIXABLE  ━━━━━━━━━━━━━━━━━━━━

  × JSX elements without children should be marked as self-closing. In JSX, it is valid for any element to be self-closing.
  
    238 │                       className="flex items-start space-x-3"
    239 │                     >
  > 240 │                       <div className="flex-shrink-0 w-2 h-2 bg-purple-400 rounded-full mt-2"></div>
        │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    241 │                       <div className="min-w-0 flex-1">
    242 │                         <p className="text-sm font-medium text-gray-900">
  
  i Unsafe fix: Use a SelfClosingElement instead
  
    238 238 │                         className="flex items-start space-x-3"
    239 239 │                       >
    240     │ - ······················<div·className="flex-shrink-0·w-2·h-2·bg-purple-400·rounded-full·mt-2"></div>
        240 │ + ······················<div·className="flex-shrink-0·w-2·h-2·bg-purple-400·rounded-full·mt-2"·/>
    241 241 │                         <div className="min-w-0 flex-1">
    242 242 │                           <p className="text-sm font-medium text-gray-900">
  

./src/app/divine-office/page.tsx:127:17 lint/style/useSelfClosingElements  FIXABLE  ━━━━━━━━━━━━━━━━

  × JSX elements without children should be marked as self-closing. In JSX, it is valid for any element to be self-closing.
  
    125 │             <div className="bg-black/30 backdrop-blur-md p-6 rounded-lg border border-gray-800 max-w-md mx-auto mb-8">
    126 │               <div className="flex items-center justify-center space-x-3 mb-4">
  > 127 │                 <div className="w-3 h-3 bg-green-500 rounded-full"></div>
        │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    128 │                 <span className="text-2xl font-bold text-[#6b9bcc]">
    129 │                   {communityCount.toLocaleString()}
  
  i Unsafe fix: Use a SelfClosingElement instead
  
    125 125 │               <div className="bg-black/30 backdrop-blur-md p-6 rounded-lg border border-gray-800 max-w-md mx-auto mb-8">
    126 126 │                 <div className="flex items-center justify-center space-x-3 mb-4">
    127     │ - ················<div·className="w-3·h-3·bg-green-500·rounded-full"></div>
        127 │ + ················<div·className="w-3·h-3·bg-green-500·rounded-full"·/>
    128 128 │                   <span className="text-2xl font-bold text-[#6b9bcc]">
    129 129 │                     {communityCount.toLocaleString()}
  

./src/app/divine-office/page.tsx:233:34 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    231 │                         {selectedHour.psalms.map((psalm, index) => (
    232 │                           <div
  > 233 │                             key={index}
        │                                  ^^^^^
    234 │                             className="flex items-center space-x-2"
    235 │                           >
  
  i This is the source of the key value.
  
    229 │                       </h4>
    230 │                       <div className="space-y-2 text-gray-300 text-sm">
  > 231 │                         {selectedHour.psalms.map((psalm, index) => (
        │                                                          ^^^^^
    232 │                           <div
    233 │                             key={index}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

The number of diagnostics exceeds the number allowed by Biome.
Diagnostics not shown: 51.
Checked 49 files in 43ms. No fixes applied.
Found 71 errors.
lint ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Some errors were emitted while running checks.
  

